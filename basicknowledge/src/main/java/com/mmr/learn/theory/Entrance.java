package com.mmr.learn.theory;

/**
 * Description: java原理
 * User: MaMingRui
 * Email: mamr@broada.com
 * Date: 2019年02月14日 17:14
 * ModificationHistory: Who         When         What
 * ---------  --------     ---------------------------
 */
public class Entrance {
    /**
     * 参考网站: https://blog.csdn.net/weixin_37730482/article/details/69281691
     *
     *
     *  概念:
     *  1. Java语言的变量最终都会被存放在内存中，java把内存划分成: 栈内存和堆内存。
     *  2. 栈中存放基本数据类型的数据、引用变量。
     *     这些字面值的数据，由于大小可知，生存期可知(这些字面值固定定义在某个程序块里面，程序块退出后，字段值就消失了)，
     *     出于追求速度的原因，就存在于栈中。
     *  3. 封装类数据，如Integer、Double等基本数据类型的封装类、String、new出来的对象存放在堆内存中。
     *     (Java用new()语句动态的告诉编译器，在运行时才需要创建对象并存放到堆中，这种做法较为灵活，但缺点是要占用更多的时间)
     *
     *
     *
     *  [栈stack]
     *  存放基本类型的变量数据和对象的引用，但对象本身不存放在栈中，而是存放在堆(new 出来的对象)或者常量池中(字符串常量对象存放在常量池中)。
     *
     *
     *  int a = 3;
     *  int b = 3;
     *
     *  栈有一个很重要的特性，那就是存在栈中的数据可以共享
     *  编译器先处理int a=3;
     *  首先，编译器会在栈中创建一个名称为a的引用变量，
     *  接着，编译器会去栈内存中去查找是否有字面值常量为3的地址，若没有找到，则开辟一个存放3这个自面值常量为3的地址。然后将a指向3存放的地址。
     *  最后处理int b=3; 由于已存在字面值常量为3的地址，因此只需要在栈这种创建一个名称为b的引用变量，并指向3存放的地址即可。
     *
     *
     *
     * [堆]
     * 存放所有new出来的对象
     *
     * [常量池]
     * 存放字符串常量和基本类型常量（public static final）。
     * 注意: 常量池既不在堆内存中，也不在栈内存中，是独立的内存空间管理。
     */

}
