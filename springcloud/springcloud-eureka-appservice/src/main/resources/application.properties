# 定义Spring Boot应用的名称，建议必须提供。因为Spring Cloud中，对服务的最大管理粒度是服务名称。
# 最好是一个应用对应一个名称，这样在进行Application Client(Consumer)开发时，比较容易查找Provider。
spring.application.name=eureka-application-service
server.port=8081

# 配置Eureka Server地址信息，若有多个Eureka Server，则相互之间用逗号分隔。
# 若开启了安全认证，则使用HTTP Basic格式来提供用户名和密码。
# 如果Eureka Server是一个集群，那么在配置Eureka Server时，建议将所有的节点信息都配置上。
# 实际上，只配置一个节点也能够完成服务注册，但Eureka Server有一个"连带责任"的问题
# 什么是连接责任:
#     配置多个节点，并不意味着Eureka Client会将自己的信息注册到每一个节点上，仍然只会注册在一个节点之中，比如在一个含有三个节点的集群内，
#     由于服务X被注册到了A节点，经过内部通信后，B和C节点都拥有了A的注册表并发现了服务X，这是好的一面，但不好之处在于，一旦A节点宕机，A的注册表内的服务会被B和X
#     统一看作是失败的服务，换句话说，此时，在整个Eureka Server集群内，找不到服务X(实际上服务X本身并没有出现任何的问题)
# 所以我们配置所有的Eureka Server地址来解决连带责任的问题。一旦Eureka Client通过轮询的方式监听到自己原本注册的Eureka Server出现了问题，它就转向注册到下一台Eureka Server
# 上，这样就保证了Eureka Server整个集群对外提供服务的可靠性(available)，降低了由于服务连带责任导致的服务不可靠性。

# 如果有多个Eureka Client需要去注册，建议Eureka Server的服务列表顺序是随机的。
# 如: 有Eureka Server s1,s2,s3  Eureka Client c1,c2,c3
# 那么在c1上配置的Eureka Server列表的建议是s1,s2,s3  c2上配置的建议是s2,s3,s1   c3上配置的建议是s3,s1,s2

# 由于Eureka Server和Eureka Client对心跳的监测都是3 * 时间间隔，因此会有服务列表数据不一致的可能。(再次说明了Eureka遵循AP原则，放弃C的强一致性)

# eureka.client.service-url.defaultZone=http://EurekaServer1:111111@127.0.0.1:8761/eureka/,http://EurekaServer2:222222@localhost:8761/eureka/
# eureka.client.service-url.defaultZone=http://eurekaserver1:111111@localhost:8762/eureka/
eureka.client.serviceUrl.defaultZone=http://eurekaserver1:111111@127.0.0.1:8762/eureka/