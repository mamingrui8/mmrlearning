<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/data/jpa
	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 引入外部jdbc配置文件 -->
    <context:property-placeholder location="classpath: jdbc.properties" />

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="driverClass" value="${jdbc.driver.class}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- Spring整合jpa，配置EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 设置jpa使用的数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 设置jpa访问数据库时显露出来的特性 -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"><!-- hiernate jpa相关的特性 -->
                <!-- 配置hibernate相关属性 -->
                <!-- 配置访问的数据库类型 -->
                <property name="database" value = "MYSQL"/>
                <!-- 正向工程 自动创建表 -->
                <property name="generateDdl" value="true"/>
                <!-- 是否打印sql -->
                <property name="showSql" value="true"/>

            </bean>
        </property>

        <!-- 扫描的实体包 -->
        <property name="packagesToScan"> <!-- 由LocalContainerEntityManagerFactoryBean提供 -->
            <list>
                <value>com.jpa.pojo</value> <!-- 逐层往下扫描  -->
            </list>
        </property>
    </bean>

    <!-- 配置Hibernate的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 配置开启注解事务处理 (目的是为了写@Transactionl 注意: 如果@Transactionl修饰在@Test 测试方法上，那么所有操作都会回滚！)-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- Spring Data JPA的配置 -->
    <!-- base-package: 扫描dao接口所在 的包 -->
    <!--
         此标签一定要配置，spring-data-jpa默认会接口提供实现 ，使用的是JDK的Proxy动态代理机制，
         将SimpleJpaRepositoryImpl类型的对象作为一个代理对象提供给自定义的dao接口 ，作为动态代理实现。
    -->
    <jpa:repositories base-package="com.jpa.dao"/>
</beans>